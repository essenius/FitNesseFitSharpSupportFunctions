clear out $expected first, to make sure any previous values are not propagated

|scenario  |check evaluation _ _ _|expression,type,expected?|
|$expected=|echo                  |                         |
|$expected=|evaluate              |@expression  |as  |@type |

|script|common functions|
|$var= |echo   |abcdef  |

|check evaluation                                                      |
|expression                       |type           |expected?           |
|'$var'+'g'                       |string         |abcdefg             |
|substring('$var',1,2)            |string         |ab                  |
|'$var'='abcdef'                  |bool           |true                |
|len('$var')                      |double         |6                   |
|1152921504606846975-1            |long           |1152921504606846974 |
|substring(trim('   abc    '),2,2)|string         |bc                  |
|8 % 3                            |int            |2                   |
|8 % 3                            |System.Int32   |2                   |
|#5-May-1995#                     |Date           |$date=              |
|#5-5-1995#                       |System.DateTime|05-May-1995 00:00:00|
|'a' IN ('a', 'b', 'c')           |bool           |true                |
|'abcd' Like '*bc*'               |bool           |true                |
|Irrelevant                       |!-WrongType-!  |                    |

|check evaluation                                                       |
|expression                       |type   |expected?                    |
|9999999999999999999999999998. + 1|decimal|9999999999999999999999999999 |
|9999999999999999999999999998 + 1 |decimal|10000000000000000000000000000|
|9999999999999999999999999998. + 1|double |1E+28                        |

These last three are tricky ones. The parser takes numbers with a decimal point as decimals
So the first evaluates in decimal, and threfore keeps its decimal precision.
Numbers without decimal points are tried as ints, longs and if that doesn't work doubles.
So the second example is evaluated as double, so it loses precision before its cast back to decimal
The third is evaluated as decimal, and then cast to double (so loses its precision then).